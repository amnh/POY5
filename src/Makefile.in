# $Id: Makefile 1929 2007-06-26 23:34:34Z andres $

# Instructions:
# You can compile a debug bytecode app by specifying DEBUG=-g
# You can compile a profiled bytecode app by specifying
#      OCAMLC=ocamlcp DEBUG="-p a"
# You can compile a profiled native app by specifying PROFILE=-p

# Change whatever options (compilers, compiler options, and so on) in this file
# Cleanup spaces so that we recognize proper options

all: clean poy

SHELL = /bin/sh
VPATH = @srcdir@

subdirs = @subdirs@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
infodir = $(prefix)/info
libdir = $(prefix)/lib/gnudl
mandir = $(prefix)/man/man1

CC = @CC@
CPPFLAGS = @CPPFLAGS@
CFLAGS = $(CPPFLAGS) @CFLAGS@ 
LDFLAGS = @LDFLAGS@
LIBS = -cclib "-lz @LIBS@"
INSTALL = @INSTALL@

USEPARALLEL := @USEPARALLEL@
USE_LARGE_MESSAGES := @USE_LARGE_MESSAGES@
USEWIN32 := @USEWIN32@
USE_LONG_SEQUENCES := @USE_LONG_SEQUENCES@
USE_LARGE_ALPHABETS := @USE_LARGE_ALPHABETS@
USEINTERFACE := @USEINTERFACE@
USEGRAPHICS := @USEGRAPHICS@
USESHAREDHD := @USESHAREDHD@
USE_XSLT := @USE_XSLT@
USE_LIKELIHOOD := @USE_LIKELIHOOD@
USE_VERIFY_COSTS := @USE_VERIFY_COSTS@
OCAML := @OCAML@
OCAMLC := @OCAMLC@
OCAMLOPT := @OCAMLOPT@ 
OCAMLDEP := @OCAMLDEP@ -slash
OCAMLTOP := @OCAMLTOP@
OCAMLLEX := @OCAMLLEX@
OCAMLYACC := @OCAMLYACC@
OCAMLBUILD := @OCAMLBUILD@
MERCURIAL :=@MERCURIAL@
EXTRAS := @EXTRAS@
OFLAGS := @OCAMLFLAGS@ 
NATIVEDYNLINK := @NATIVEDYNLINK@

status.ml: config.h $(wildcard status_*.ml)
ifeq ($(USEINTERFACE), ncurses)
	cp status_ncurses.ml status.ml
else 
ifeq ($(USEINTERFACE), readline)
	cp status_flat.ml status.ml
else 
ifeq ($(USEINTERFACE), flat)
	cp status_flat.ml status.ml
else 
ifeq ($(USEINTERFACE), gtk2)
	cp status_gtk2.ml status.ml
else 
ifeq ($(USEINTERFACE), cocoa)
	cp status_cocoa.ml status.ml
else 
ifeq ($(USEINTERFACE), html)
	cp status_html.ml status.ml
endif
endif
endif
endif
endif
endif


.PHONY: help.txt *.top *.native *.byte

# All the libraries specialized for certain size in the character set.
# First we define the sed scripts that will replace the names with the
# approprate needs 
SED8 = sed "s/nonadd_/nonadd8_/g; s/NONADDSIZE/8/g"
SED16 = sed "s/nonadd_/nonadd16_/g; s/NONADDSIZE/16/g"
SED32 = sed "s/nonadd_/nonadd32_/g; s/NONADDSIZE/32/g"

nonaddCS8.ml: nonaddCS.ml
	$(SED8) nonaddCS.ml > $@

nonaddCS16.ml: nonaddCS.ml
	$(SED16) nonaddCS.ml > $@

nonaddCS32.ml: nonaddCS.ml
	$(SED32) nonaddCS.ml > $@

nonaddCSc8.c: nonaddCSc.c
	$(SED8) $< > $@

nonaddCSc16.c: nonaddCSc.c
	$(SED16) $< > $@

nonaddCSc32.c: nonaddCSc.c
	$(SED32) $< > $@

poy.1: help.txt

# Help file gets made using OCaml script
help.txt: latex.ml ../doc/allcommands.tex
	$(OCAMLBUILD) latex.native
ifeq ($(USEWIN32), true)
	./latex.native.exe 
else
	./latex.native 
endif

help.ml: ../doc/commands.tex
	$(OCAMLBUILD) helpRead.native
	./helpRead.native

help.html: ../doc/commands.tex 
	$(OCAMLBUILD) helpRead.native
	./helpRead.native -html

generics: nonaddCS8.ml nonaddCS16.ml nonaddCS32.ml help.txt help.ml status.ml nonaddCSc8.c nonaddCSc16.c nonaddCSc32.c

%.top: generics
	$(OCAMLBUILD) $@

%.byte: generics
	$(OCAMLBUILD) $@

%.native: generics
	$(OCAMLBUILD) $@

all: poy.native poy.byte poy.top
